pragma language_version 0.16;

import CompactStandardLibrary;

// Map to store public keys to text identifiers
export ledger registry: Map<Bytes<32>, Opaque<"string">>;

// Register a user with their text identifier
export circuit register(text: Opaque<"string">): [] {
    // Get the user's public key
    const pkBytes = ownPublicKey().bytes;
    const pk = disclose(pkBytes);
    
    // Check if the user is already registered
    assert(!registry.member(pk), "User already registered");
    
    // Store the text identifier associated with the public key
    const disclosedText = disclose(text);
    registry.insert(pk, disclosedText);
}

// Verify the text identifier of a public key
export circuit verify_text(pk: Bytes<32>): Opaque<"string"> {
    // Check if the public key exists in the registry
    const disclosedPk = disclose(pk);
    assert(registry.member(disclosedPk), "Public key not registered");
    
    // Return the text identifier associated with the public key
    return registry.lookup(disclosedPk);
}

// Test Purpose
export circuit read_own_public_key(): Bytes<32> {
    return ownPublicKey().bytes;
}